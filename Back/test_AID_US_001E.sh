#!/bin/bash\n\n# AI Dock App - Security Enhancements Testing Script (AID-US-001E)\n# This script tests all security enhancements including rate limiting, token cleanup, and security features\n\nset -e\n\necho \"🔒 AI Dock App - Security Enhancements Testing (AID-US-001E)\"\necho \"==========================================================\"\necho \"Testing: Rate Limiting, Token Cleanup, Security Features\"\necho \"\"\n\n# Colors for output\nRED='\\033[0;31m'\nGREEN='\\033[0;32m'\nYELLOW='\\033[1;33m'\nBLUE='\\033[0;34m'\nNC='\\033[0m' # No Color\n\n# Test configuration\nBASE_URL=\"http://localhost:8000\"\nAPI_BASE=\"${BASE_URL}/api/v1\"\nTEST_USER=\"user1\"\nTEST_PASS=\"user123\"\nTEST_ADMIN=\"admin\"\nADMIN_PASS=\"admin123\"\n\n# Function to print test status\nprint_test() {\n    echo -e \"${BLUE}[TEST]${NC} $1\"\n}\n\nprint_success() {\n    echo -e \"${GREEN}[✓]${NC} $1\"\n}\n\nprint_error() {\n    echo -e \"${RED}[✗]${NC} $1\"\n}\n\nprint_warning() {\n    echo -e \"${YELLOW}[!]${NC} $1\"\n}\n\n# Function to check if server is running\ncheck_server() {\n    print_test \"Checking if backend server is running...\"\n    if curl -s \"${BASE_URL}/health\" > /dev/null; then\n        print_success \"Backend server is running\"\n        return 0\n    else\n        print_error \"Backend server is not running on ${BASE_URL}\"\n        echo \"Please start the backend server first:\"\n        echo \"  cd /Users/blas/Desktop/INRE/INRE-AI-Dock/Back\"\n        echo \"  python -m uvicorn app.main:app --host 0.0.0.0 --port 8000 --reload\"\n        exit 1\n    fi\n}\n\n# Function to get authentication token\nget_auth_token() {\n    local username=$1\n    local password=$2\n    local remember_me=${3:-false}\n    \n    response=$(curl -s -X POST \"${API_BASE}/auth/login\" \\\n        -H \"Content-Type: application/json\" \\\n        -d \"{\n            \\\"username\\\": \\\"$username\\\",\n            \\\"password\\\": \\\"$password\\\",\n            \\\"remember_me\\\": $remember_me\n        }\")\n    \n    if echo \"$response\" | grep -q \"access_token\"; then\n        echo \"$response\" | python3 -c \"import sys, json; print(json.load(sys.stdin)['access_token'])\"\n    else\n        echo \"\"\n    fi\n}\n\n# Test 1: Basic Security Features\ntest_security_features() {\n    print_test \"Testing security features and headers...\"\n    \n    # Test health endpoint with security status\n    response=$(curl -s \"${BASE_URL}/health\")\n    if echo \"$response\" | grep -q \"security_features\"; then\n        print_success \"Health endpoint includes security status\"\n    else\n        print_error \"Health endpoint missing security information\"\n    fi\n    \n    # Test security headers\n    headers=$(curl -s -I \"${BASE_URL}/\")\n    if echo \"$headers\" | grep -q \"X-Content-Type-Options\"; then\n        print_success \"Security headers are being added\"\n    else\n        print_warning \"Security headers may not be enabled\"\n    fi\n    \n    # Test root endpoint security information\n    response=$(curl -s \"${BASE_URL}/\")\n    if echo \"$response\" | grep -q \"Rate Limiting\"; then\n        print_success \"Root endpoint includes security feature information\"\n    else\n        print_error \"Root endpoint missing security features info\"\n    fi\n}\n\n# Test 2: Rate Limiting Functionality\ntest_rate_limiting() {\n    print_test \"Testing rate limiting functionality...\"\n    \n    # Clear rate limits first (development only)\n    curl -s -X POST \"${API_BASE}/security/rate-limits/clear\" > /dev/null || true\n    \n    # Test login rate limiting\n    print_test \"Testing login rate limiting (making 7 rapid requests)...\"\n    rate_limited=false\n    \n    for i in {1..7}; do\n        response=$(curl -s -w \"%{http_code}\" -X POST \"${API_BASE}/auth/login\" \\\n            -H \"Content-Type: application/json\" \\\n            -d \"{\n                \\\"username\\\": \\\"$TEST_USER\\\",\n                \\\"password\\\": \\\"wrongpassword\\\",\n                \\\"remember_me\\\": false\n            }\")\n        \n        http_code=$(echo \"$response\" | tail -c 4)\n        \n        if [ \"$http_code\" = \"429\" ]; then\n            rate_limited=true\n            print_success \"Rate limiting triggered on attempt $i (HTTP 429)\"\n            break\n        fi\n        \n        sleep 0.1  # Small delay between requests\n    done\n    \n    if [ \"$rate_limited\" = true ]; then\n        print_success \"Login rate limiting is working correctly\"\n    else\n        print_warning \"Rate limiting may not be working (or limits are very high)\"\n    fi\n}\n\n# Test 3: Rate Limiting Statistics\ntest_rate_limit_stats() {\n    print_test \"Testing rate limiting statistics endpoint...\"\n    \n    response=$(curl -s \"${API_BASE}/security/rate-limits\")\n    if echo \"$response\" | grep -q \"rate_limit_stats\"; then\n        print_success \"Rate limiting statistics endpoint is working\"\n        \n        # Show some stats\n        blocked_ips=$(echo \"$response\" | python3 -c \"import sys, json; data=json.load(sys.stdin); print(data['rate_limit_stats']['blocked_ips'])\" 2>/dev/null || echo \"0\")\n        print_test \"Currently blocked IPs: $blocked_ips\"\n    else\n        print_error \"Rate limiting statistics endpoint failed\"\n    fi\n}\n\n# Test 4: Authentication Flow with Security\ntest_secure_auth_flow() {\n    print_test \"Testing secure authentication flow...\"\n    \n    # Clear rate limits to ensure clean test\n    curl -s -X POST \"${API_BASE}/security/rate-limits/clear\" > /dev/null || true\n    \n    # Test successful login\n    print_test \"Testing successful login...\"\n    token=$(get_auth_token \"$TEST_USER\" \"$TEST_PASS\" false)\n    \n    if [ -n \"$token\" ]; then\n        print_success \"Successful login obtained token\"\n        \n        # Test protected endpoint access\n        response=$(curl -s -H \"Authorization: Bearer $token\" \"${API_BASE}/auth/me\")\n        if echo \"$response\" | grep -q \"$TEST_USER\"; then\n            print_success \"Protected endpoint access working\"\n        else\n            print_error \"Protected endpoint access failed\"\n        fi\n        \n        # Test logout\n        logout_response=$(curl -s -X POST -H \"Authorization: Bearer $token\" \"${API_BASE}/auth/logout\")\n        if echo \"$logout_response\" | grep -q \"success\" || [ \"$(curl -s -w \"%{http_code}\" -o /dev/null -X POST -H \"Authorization: Bearer $token\" \"${API_BASE}/auth/logout\")\" = \"200\" ]; then\n            print_success \"Logout working correctly\"\n        else\n            print_warning \"Logout may not be working correctly\"\n        fi\n    else\n        print_error \"Failed to obtain authentication token\"\n    fi\n}\n\n# Test 5: Remember Me Functionality\ntest_remember_me() {\n    print_test \"Testing Remember Me functionality...\"\n    \n    # Test with remember_me = true\n    token_with_remember=$(get_auth_token \"$TEST_USER\" \"$TEST_PASS\" true)\n    \n    if [ -n \"$token_with_remember\" ]; then\n        print_success \"Remember Me login successful\"\n        \n        # In a real test, we would check token expiration time\n        # For now, we'll just verify we got a token\n        print_test \"Remember Me token obtained (expiration testing requires JWT decode)\"\n    else\n        print_error \"Remember Me login failed\"\n    fi\n    \n    # Test without remember_me (default)\n    token_without_remember=$(get_auth_token \"$TEST_USER\" \"$TEST_PASS\" false)\n    \n    if [ -n \"$token_without_remember\" ]; then\n        print_success \"Standard login (no remember me) successful\"\n    else\n        print_error \"Standard login failed\"\n    fi\n}\n\n# Test 6: Admin Access and Functionality\ntest_admin_functionality() {\n    print_test \"Testing admin functionality...\"\n    \n    # Get admin token\n    admin_token=$(get_auth_token \"$TEST_ADMIN\" \"$ADMIN_PASS\" false)\n    \n    if [ -n \"$admin_token\" ]; then\n        print_success \"Admin authentication successful\"\n        \n        # Test admin profile access\n        response=$(curl -s -H \"Authorization: Bearer $admin_token\" \"${API_BASE}/auth/me\")\n        if echo \"$response\" | grep -q \"admin\"; then\n            print_success \"Admin profile access working\"\n        else\n            print_error \"Admin profile access failed\"\n        fi\n        \n        # Test admin-specific endpoints (if any)\n        # For now, just verify admin role is returned\n        role=$(echo \"$response\" | python3 -c \"import sys, json; print(json.load(sys.stdin)['role'])\" 2>/dev/null || echo \"unknown\")\n        if [ \"$role\" = \"admin\" ]; then\n            print_success \"Admin role verification successful\"\n        else\n            print_error \"Admin role verification failed: role=$role\"\n        fi\n    else\n        print_error \"Admin authentication failed\"\n    fi\n}\n\n# Test 7: Input Validation and Security\ntest_input_validation() {\n    print_test \"Testing input validation and security...\"\n    \n    # Test invalid JSON\n    response=$(curl -s -w \"%{http_code}\" -X POST \"${API_BASE}/auth/login\" \\\n        -H \"Content-Type: application/json\" \\\n        -d \"invalid json\")\n    \n    http_code=$(echo \"$response\" | tail -c 4)\n    if [ \"$http_code\" = \"422\" ] || [ \"$http_code\" = \"400\" ]; then\n        print_success \"Invalid JSON properly rejected (HTTP $http_code)\"\n    else\n        print_warning \"Invalid JSON handling may need improvement (HTTP $http_code)\"\n    fi\n    \n    # Test missing fields\n    response=$(curl -s -w \"%{http_code}\" -X POST \"${API_BASE}/auth/login\" \\\n        -H \"Content-Type: application/json\" \\\n        -d \"{}\")\n    \n    http_code=$(echo \"$response\" | tail -c 4)\n    if [ \"$http_code\" = \"422\" ]; then\n        print_success \"Missing fields properly validated (HTTP 422)\"\n    else\n        print_warning \"Missing field validation may need improvement (HTTP $http_code)\"\n    fi\n    \n    # Test SQL injection attempt (should be harmless but test anyway)\n    response=$(curl -s -w \"%{http_code}\" -X POST \"${API_BASE}/auth/login\" \\\n        -H \"Content-Type: application/json\" \\\n        -d \"{\n            \\\"username\\\": \\\"'; DROP TABLE users; --\\\",\n            \\\"password\\\": \\\"test\\\",\n            \\\"remember_me\\\": false\n        }\")\n    \n    http_code=$(echo \"$response\" | tail -c 4)\n    if [ \"$http_code\" = \"401\" ] || [ \"$http_code\" = \"422\" ]; then\n        print_success \"SQL injection attempt properly handled (HTTP $http_code)\"\n    else\n        print_warning \"SQL injection handling may need review (HTTP $http_code)\"\n    fi\n}\n\n# Test 8: Token Refresh Security\ntest_token_refresh_security() {\n    print_test \"Testing token refresh security...\"\n    \n    # Get initial tokens\n    token=$(get_auth_token \"$TEST_USER\" \"$TEST_PASS\" false)\n    \n    if [ -n \"$token\" ]; then\n        # Get refresh token (we need to extract it from login response)\n        login_response=$(curl -s -X POST \"${API_BASE}/auth/login\" \\\n            -H \"Content-Type: application/json\" \\\n            -d \"{\n                \\\"username\\\": \\\"$TEST_USER\\\",\n                \\\"password\\\": \\\"$TEST_PASS\\\",\n                \\\"remember_me\\\": false\n            }\")\n        \n        refresh_token=$(echo \"$login_response\" | python3 -c \"import sys, json; print(json.load(sys.stdin)['refresh_token'])\" 2>/dev/null || echo \"\")\n        \n        if [ -n \"$refresh_token\" ]; then\n            # Test token refresh\n            refresh_response=$(curl -s -X POST \"${API_BASE}/auth/refresh\" \\\n                -H \"Content-Type: application/json\" \\\n                -d \"{\\\"refresh_token\\\": \\\"$refresh_token\\\"}\")\n            \n            if echo \"$refresh_response\" | grep -q \"access_token\"; then\n                print_success \"Token refresh working correctly\"\n            else\n                print_error \"Token refresh failed\"\n            fi\n            \n            # Test invalid refresh token\n            invalid_refresh=$(curl -s -w \"%{http_code}\" -X POST \"${API_BASE}/auth/refresh\" \\\n                -H \"Content-Type: application/json\" \\\n                -d \"{\\\"refresh_token\\\": \\\"invalid.token.here\\\"}\")\n            \n            http_code=$(echo \"$invalid_refresh\" | tail -c 4)\n            if [ \"$http_code\" = \"401\" ] || [ \"$http_code\" = \"422\" ]; then\n                print_success \"Invalid refresh token properly rejected (HTTP $http_code)\"\n            else\n                print_warning \"Invalid refresh token handling may need improvement (HTTP $http_code)\"\n            fi\n        else\n            print_error \"Could not extract refresh token from login response\"\n        fi\n    else\n        print_error \"Could not get initial token for refresh testing\"\n    fi\n}\n\n# Main test execution\nmain() {\n    echo \"Starting comprehensive security testing...\"\n    echo \"\"\n    \n    # Check prerequisites\n    check_server\n    \n    # Run all tests\n    test_security_features\n    echo \"\"\n    \n    test_rate_limiting\n    echo \"\"\n    \n    test_rate_limit_stats\n    echo \"\"\n    \n    test_secure_auth_flow\n    echo \"\"\n    \n    test_remember_me\n    echo \"\"\n    \n    test_admin_functionality\n    echo \"\"\n    \n    test_input_validation\n    echo \"\"\n    \n    test_token_refresh_security\n    echo \"\"\n    \n    # Final summary\n    echo \"========================================\"\n    echo -e \"${GREEN}✅ Security Enhancement Testing Complete${NC}\"\n    echo \"========================================\"\n    echo \"\"\n    echo \"📋 Test Summary:\"\n    echo \"  • Security headers and features\"\n    echo \"  • Rate limiting functionality\"\n    echo \"  • Rate limiting statistics\"\n    echo \"  • Secure authentication flow\"\n    echo \"  • Remember Me functionality\"\n    echo \"  • Admin functionality\"\n    echo \"  • Input validation\"\n    echo \"  • Token refresh security\"\n    echo \"\"\n    echo \"🔍 Next Steps:\"\n    echo \"  1. Review any warnings or errors above\"\n    echo \"  2. Run comprehensive test suite: pytest tests/test_auth.py -v\"\n    echo \"  3. Test background tasks (token cleanup)\"\n    echo \"  4. Monitor rate limiting in production\"\n    echo \"\"\n    echo \"📚 Documentation:\"\n    echo \"  • Rate limiting: /api/v1/security/rate-limits\"\n    echo \"  • API docs: http://localhost:8000/docs\"\n    echo \"  • Health check: http://localhost:8000/health\"\n}\n\n# Run main function\nmain\n