#!/usr/bin/env python3\n\"\"\"\nComprehensive Test Suite for AID-US-001C: Authentication API Endpoints\n\nThis script tests all authentication endpoints:\n- POST /auth/login\n- POST /auth/refresh  \n- POST /auth/logout\n- GET /auth/me\n- Development endpoints\n\nRequires the FastAPI server to be running on http://localhost:8000\n\"\"\"\n\nimport requests\nimport json\nimport time\nfrom datetime import datetime\nfrom typing import Dict, Optional\n\n\n# =============================================================================\n# TEST CONFIGURATION\n# =============================================================================\n\nBASE_URL = \"http://localhost:8000\"\nAPI_BASE = f\"{BASE_URL}/api/v1/auth\"\n\n# Test user credentials (from mock database)\nTEST_USERS = {\n    \"admin\": {\n        \"username\": \"admin\",\n        \"password\": \"AdminPassword123\",\n        \"expected_role\": \"admin\",\n        \"expected_superuser\": True\n    },\n    \"user1\": {\n        \"username\": \"user1\",\n        \"password\": \"UserPassword123\",\n        \"expected_role\": \"user\",\n        \"expected_superuser\": False\n    },\n    \"user2\": {\n        \"username\": \"user2\", \n        \"password\": \"UserPassword456\",\n        \"expected_role\": \"user\",\n        \"expected_superuser\": False\n    },\n    \"analyst\": {\n        \"username\": \"analyst\",\n        \"password\": \"AnalystPassword789\",\n        \"expected_role\": \"analyst\", \n        \"expected_superuser\": False\n    }\n}\n\n\n# =============================================================================\n# UTILITY FUNCTIONS\n# =============================================================================\n\ndef print_test_header(test_name: str) -> None:\n    \"\"\"Print formatted test header.\"\"\"\n    print(f\"\\n{'='*60}\")\n    print(f\"TEST: {test_name}\")\n    print(f\"{'='*60}\")\n\n\ndef print_success(message: str) -> None:\n    \"\"\"Print success message.\"\"\"\n    print(f\"✅ {message}\")\n\n\ndef print_error(message: str) -> None:\n    \"\"\"Print error message.\"\"\"\n    print(f\"❌ {message}\")\n\n\ndef print_info(message: str) -> None:\n    \"\"\"Print info message.\"\"\"\n    print(f\"ℹ️  {message}\")\n\n\ndef make_request(\n    method: str, \n    url: str, \n    data: Optional[Dict] = None,\n    headers: Optional[Dict] = None,\n    expected_status: int = 200\n) -> Dict:\n    \"\"\"Make HTTP request and handle response.\"\"\"\n    try:\n        if method.upper() == \"GET\":\n            response = requests.get(url, headers=headers or {})\n        elif method.upper() == \"POST\":\n            response = requests.post(\n                url, \n                json=data or {}, \n                headers=headers or {\"Content-Type\": \"application/json\"}\n            )\n        else:\n            raise ValueError(f\"Unsupported method: {method}\")\n        \n        print(f\"Request: {method} {url}\")\n        if data:\n            print(f\"Data: {json.dumps(data, indent=2)}\")\n        print(f\"Status: {response.status_code}\")\n        \n        try:\n            response_data = response.json()\n            print(f\"Response: {json.dumps(response_data, indent=2, default=str)}\")\n        except json.JSONDecodeError:\n            response_data = {\"text\": response.text}\n            print(f\"Response (text): {response.text}\")\n        \n        if response.status_code == expected_status:\n            print_success(f\"Expected status {expected_status} received\")\n        else:\n            print_error(f\"Expected status {expected_status}, got {response.status_code}\")\n        \n        return {\n            \"status_code\": response.status_code,\n            \"data\": response_data,\n            \"headers\": dict(response.headers)\n        }\n        \n    except Exception as e:\n        print_error(f\"Request failed: {str(e)}\")\n        return {\n            \"status_code\": 0,\n            \"data\": {\"error\": str(e)},\n            \"headers\": {}\n        }\n\n\n# =============================================================================\n# TEST FUNCTIONS\n# =============================================================================\n\ndef test_server_health() -> bool:\n    \"\"\"Test if server is running and healthy.\"\"\"\n    print_test_header(\"Server Health Check\")\n    \n    # Test root endpoint\n    response = make_request(\"GET\", BASE_URL)\n    if response[\"status_code\"] != 200:\n        print_error(\"Server not responding at root endpoint\")\n        return False\n    \n    # Test health endpoint\n    response = make_request(\"GET\", f\"{BASE_URL}/health\")\n    if response[\"status_code\"] != 200:\n        print_error(\"Health endpoint not responding\")\n        return False\n    \n    # Test auth health endpoint\n    response = make_request(\"GET\", f\"{API_BASE}/health\")\n    if response[\"status_code\"] != 200:\n        print_error(\"Auth health endpoint not responding\")\n        return False\n    \n    print_success(\"Server is healthy and responding\")\n    return True\n\n\ndef test_get_test_credentials() -> bool:\n    \"\"\"Test getting test credentials endpoint.\"\"\"\n    print_test_header(\"Test Credentials Endpoint\")\n    \n    response = make_request(\"GET\", f\"{API_BASE}/test-credentials\")\n    \n    if response[\"status_code\"] != 200:\n        print_error(\"Failed to get test credentials\")\n        return False\n    \n    credentials = response[\"data\"]\n    print_success(\"Test credentials retrieved successfully\")\n    \n    # Verify expected credentials exist\n    expected_users = [\"admin\", \"user1\", \"user2\", \"analyst\"]\n    for user in expected_users:\n        if user in credentials:\n            print_success(f\"Credentials found for {user}\")\n        else:\n            print_error(f\"Missing credentials for {user}\")\n    \n    return True\n\n\ndef test_login_success(username: str, password: str, remember_me: bool = False) -> Optional[Dict]:\n    \"\"\"Test successful login.\"\"\"\n    print_test_header(f\"Login Test - {username} (remember_me={remember_me})\")\n    \n    login_data = {\n        \"username\": username,\n        \"password\": password,\n        \"remember_me\": remember_me\n    }\n    \n    response = make_request(\"POST\", f\"{API_BASE}/login\", login_data)\n    \n    if response[\"status_code\"] != 200:\n        print_error(f\"Login failed for {username}\")\n        return None\n    \n    data = response[\"data\"]\n    \n    # Verify response structure\n    required_fields = [\"access_token\", \"refresh_token\", \"token_type\", \"expires_in\"]\n    for field in required_fields:\n        if field in data:\n            print_success(f\"Response contains {field}\")\n        else:\n            print_error(f\"Response missing {field}\")\n            return None\n    \n    # Verify token type\n    if data.get(\"token_type\") == \"bearer\":\n        print_success(\"Token type is 'bearer'\")\n    else:\n        print_error(f\"Expected token_type 'bearer', got '{data.get('token_type')}'\")\n    \n    # Verify tokens are non-empty\n    if data.get(\"access_token\"):\n        print_success(\"Access token received\")\n    else:\n        print_error(\"Access token is empty\")\n    \n    if data.get(\"refresh_token\"):\n        print_success(\"Refresh token received\")\n    else:\n        print_error(\"Refresh token is empty\")\n    \n    print_success(f\"Login successful for {username}\")\n    return data\n\n\ndef test_login_failure() -> bool:\n    \"\"\"Test login with invalid credentials.\"\"\"\n    print_test_header(\"Login Failure Test\")\n    \n    # Test with invalid username\n    response = make_request(\n        \"POST\", \n        f\"{API_BASE}/login\",\n        {\"username\": \"nonexistent\", \"password\": \"wrongpassword\"},\n        expected_status=404\n    )\n    \n    if response[\"status_code\"] == 404:\n        print_success(\"Invalid username correctly rejected\")\n    else:\n        print_error(\"Invalid username should return 404\")\n        return False\n    \n    # Test with invalid password\n    response = make_request(\n        \"POST\",\n        f\"{API_BASE}/login\", \n        {\"username\": \"admin\", \"password\": \"wrongpassword\"},\n        expected_status=401\n    )\n    \n    if response[\"status_code\"] == 401:\n        print_success(\"Invalid password correctly rejected\")\n    else:\n        print_error(\"Invalid password should return 401\")\n        return False\n    \n    print_success(\"Login failure tests passed\")\n    return True\n\n\ndef test_get_user_profile(access_token: str, expected_user: Dict) -> bool:\n    \"\"\"Test getting user profile.\"\"\"\n    print_test_header(f\"User Profile Test - {expected_user['username']}\")\n    \n    headers = {\"Authorization\": f\"Bearer {access_token}\"}\n    response = make_request(\"GET\", f\"{API_BASE}/me\", headers=headers)\n    \n    if response[\"status_code\"] != 200:\n        print_error(\"Failed to get user profile\")\n        return False\n    \n    profile = response[\"data\"]\n    \n    # Verify profile fields\n    required_fields = [\"user_id\", \"username\", \"email\", \"role\", \"permissions\", \"is_superuser\"]\n    for field in required_fields:\n        if field in profile:\n            print_success(f\"Profile contains {field}: {profile[field]}\")\n        else:\n            print_error(f\"Profile missing {field}\")\n            return False\n    \n    # Verify expected values\n    if profile.get(\"username\") == expected_user[\"username\"]:\n        print_success(f\"Username matches: {profile['username']}\")\n    else:\n        print_error(f\"Username mismatch: expected {expected_user['username']}, got {profile.get('username')}\")\n    \n    if profile.get(\"role\") == expected_user[\"expected_role\"]:\n        print_success(f\"Role matches: {profile['role']}\")\n    else:\n        print_error(f\"Role mismatch: expected {expected_user['expected_role']}, got {profile.get('role')}\")\n    \n    if profile.get(\"is_superuser\") == expected_user[\"expected_superuser\"]:\n        print_success(f\"Superuser status matches: {profile['is_superuser']}\")\n    else:\n        print_error(f\"Superuser mismatch: expected {expected_user['expected_superuser']}, got {profile.get('is_superuser')}\")\n    \n    print_success(\"User profile test passed\")\n    return True\n\n\ndef test_token_refresh(refresh_token: str) -> Optional[str]:\n    \"\"\"Test token refresh.\"\"\"\n    print_test_header(\"Token Refresh Test\")\n    \n    refresh_data = {\"refresh_token\": refresh_token}\n    response = make_request(\"POST\", f\"{API_BASE}/refresh\", refresh_data)\n    \n    if response[\"status_code\"] != 200:\n        print_error(\"Token refresh failed\")\n        return None\n    \n    data = response[\"data\"]\n    \n    # Verify response structure\n    required_fields = [\"access_token\", \"token_type\", \"expires_in\"]\n    for field in required_fields:\n        if field in data:\n            print_success(f\"Refresh response contains {field}\")\n        else:\n            print_error(f\"Refresh response missing {field}\")\n            return None\n    \n    new_access_token = data.get(\"access_token\")\n    if new_access_token:\n        print_success(\"New access token received\")\n        return new_access_token\n    else:\n        print_error(\"New access token is empty\")\n        return None\n\n\ndef test_logout(refresh_token: str) -> bool:\n    \"\"\"Test user logout.\"\"\"\n    print_test_header(\"Logout Test\")\n    \n    logout_data = {\"refresh_token\": refresh_token}\n    response = make_request(\"POST\", f\"{API_BASE}/logout\", logout_data)\n    \n    if response[\"status_code\"] != 200:\n        print_error(\"Logout failed\")\n        return False\n    \n    data = response[\"data\"]\n    \n    if \"message\" in data and \"logged_out_at\" in data:\n        print_success(f\"Logout successful: {data['message']}\")\n        return True\n    else:\n        print_error(\"Logout response missing required fields\")\n        return False\n\n\ndef test_token_after_logout(refresh_token: str) -> bool:\n    \"\"\"Test that refresh token is invalid after logout.\"\"\"\n    print_test_header(\"Token Validation After Logout\")\n    \n    refresh_data = {\"refresh_token\": refresh_token}\n    response = make_request(\n        \"POST\", \n        f\"{API_BASE}/refresh\", \n        refresh_data,\n        expected_status=403\n    )\n    \n    if response[\"status_code\"] == 403:\n        print_success(\"Refresh token correctly rejected after logout\")\n        return True\n    else:\n        print_error(\"Refresh token should be invalid after logout\")\n        return False\n\n\ndef test_protected_endpoint_without_token() -> bool:\n    \"\"\"Test accessing protected endpoint without token.\"\"\"\n    print_test_header(\"Protected Endpoint Without Token\")\n    \n    response = make_request(\"GET\", f\"{API_BASE}/me\", expected_status=403)\n    \n    if response[\"status_code\"] == 403:\n        print_success(\"Protected endpoint correctly rejects requests without token\")\n        return True\n    else:\n        print_error(\"Protected endpoint should require authentication\")\n        return False\n\n\ndef test_admin_endpoints(access_token: str) -> bool:\n    \"\"\"Test admin-only endpoints.\"\"\"\n    print_test_header(\"Admin Endpoints Test\")\n    \n    headers = {\"Authorization\": f\"Bearer {access_token}\"}\n    response = make_request(\"GET\", f\"{API_BASE}/users\", headers=headers)\n    \n    if response[\"status_code\"] != 200:\n        print_error(\"Failed to access admin endpoint\")\n        return False\n    \n    users_list = response[\"data\"]\n    \n    if isinstance(users_list, list) and len(users_list) > 0:\n        print_success(f\"Retrieved {len(users_list)} users\")\n        \n        # Check first user structure\n        first_user = users_list[0]\n        required_fields = [\"user_id\", \"username\", \"email\", \"role\"]\n        for field in required_fields:\n            if field in first_user:\n                print_success(f\"User object contains {field}\")\n            else:\n                print_error(f\"User object missing {field}\")\n                return False\n        \n        return True\n    else:\n        print_error(\"Users list is empty or invalid\")\n        return False\n\n\n# =============================================================================\n# MAIN TEST EXECUTION\n# =============================================================================\n\ndef run_comprehensive_tests() -> None:\n    \"\"\"Run all authentication tests.\"\"\"\n    print(\"🧪 AID-US-001C: Authentication API Endpoints - Comprehensive Test Suite\")\n    print(\"=\" * 80)\n    print(f\"Testing API at: {API_BASE}\")\n    print(f\"Started at: {datetime.now().isoformat()}\")\n    \n    test_results = []\n    \n    # Test 1: Server Health\n    test_results.append((\"Server Health\", test_server_health()))\n    \n    # Test 2: Test Credentials Endpoint\n    test_results.append((\"Test Credentials\", test_get_test_credentials()))\n    \n    # Test 3: Login Failures\n    test_results.append((\"Login Failures\", test_login_failure()))\n    \n    # Test 4: Protected Endpoint Without Token\n    test_results.append((\"Protected Endpoint Security\", test_protected_endpoint_without_token()))\n    \n    # Test 5: Successful Login and Profile Tests\n    admin_tokens = None\n    user_tokens = None\n    \n    for user_key, user_data in TEST_USERS.items():\n        # Test login\n        tokens = test_login_success(\n            user_data[\"username\"], \n            user_data[\"password\"],\n            remember_me=(user_key == \"admin\")  # Test remember me for admin\n        )\n        \n        if tokens:\n            test_results.append((f\"Login - {user_key}\", True))\n            \n            # Test user profile\n            profile_success = test_get_user_profile(\n                tokens[\"access_token\"], \n                user_data\n            )\n            test_results.append((f\"Profile - {user_key}\", profile_success))\n            \n            # Store tokens for further tests\n            if user_key == \"admin\":\n                admin_tokens = tokens\n            elif user_key == \"user1\":\n                user_tokens = tokens\n        else:\n            test_results.append((f\"Login - {user_key}\", False))\n    \n    # Test 6: Token Refresh\n    if user_tokens:\n        new_access_token = test_token_refresh(user_tokens[\"refresh_token\"])\n        test_results.append((\"Token Refresh\", new_access_token is not None))\n        \n        # Test new token works\n        if new_access_token:\n            profile_success = test_get_user_profile(\n                new_access_token,\n                TEST_USERS[\"user1\"]\n            )\n            test_results.append((\"New Token Validation\", profile_success))\n    \n    # Test 7: Admin Endpoints\n    if admin_tokens:\n        admin_success = test_admin_endpoints(admin_tokens[\"access_token\"])\n        test_results.append((\"Admin Endpoints\", admin_success))\n    \n    # Test 8: Logout and Token Invalidation\n    if user_tokens:\n        logout_success = test_logout(user_tokens[\"refresh_token\"])\n        test_results.append((\"Logout\", logout_success))\n        \n        if logout_success:\n            token_invalid = test_token_after_logout(user_tokens[\"refresh_token\"])\n            test_results.append((\"Token Invalidation\", token_invalid))\n    \n    # Print Test Summary\n    print(\"\\n\" + \"=\" * 80)\n    print(\"TEST RESULTS SUMMARY\")\n    print(\"=\" * 80)\n    \n    passed = 0\n    total = len(test_results)\n    \n    for test_name, success in test_results:\n        if success:\n            print_success(f\"{test_name}\")\n            passed += 1\n        else:\n            print_error(f\"{test_name}\")\n    \n    print(\"\\n\" + \"=\" * 80)\n    print(f\"FINAL RESULTS: {passed}/{total} tests passed\")\n    \n    if passed == total:\n        print(\"🎉 ALL TESTS PASSED! AID-US-001C is fully functional!\")\n        print(\"✅ Authentication API endpoints are ready for production use.\")\n    else:\n        print(f\"⚠️  {total - passed} tests failed. Please review the errors above.\")\n    \n    print(f\"Completed at: {datetime.now().isoformat()}\")\n    print(\"=\" * 80)\n\n\nif __name__ == \"__main__\":\n    print(\"Starting comprehensive authentication API tests...\")\n    print(\"\")\n    print(\"Prerequisites:\")\n    print(\"1. FastAPI server running on http://localhost:8000\")\n    print(\"2. All dependencies installed (requests, etc.)\")\n    print(\"\")\n    input(\"Press Enter to continue or Ctrl+C to cancel...\")\n    \n    run_comprehensive_tests()\n