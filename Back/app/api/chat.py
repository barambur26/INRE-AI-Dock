"""
Chat API endpoints for LLM interactions.
"""
from typing import Dict, Any
from uuid import UUID

from fastapi import APIRouter, Depends, HTTPException, status
from sqlalchemy.ext.asyncio import AsyncSession

from app.core.database import get_async_session
from app.schemas.auth import UserProfile
from app.schemas.chat import (\n    ChatSendRequest, ChatSendResponse, AvailableModelsResponse,\n    UsageQuotaInfo, ChatStatsResponse, ChatHealthResponse,\n    ChatErrorResponse\n)\nfrom app.services.chat_service import (\n    chat_service, ChatServiceError, NoAvailableModelsError, QuotaExceededError\n)\nfrom app.services.llm_service import LLMProviderError\nfrom app.utils.admin_auth import get_current_user\n\nrouter = APIRouter(prefix=\"/api/v1/chat\", tags=[\"chat\"])\n\n\n@router.post(\"/send\", response_model=ChatSendResponse)\nasync def send_chat_message(\n    request: ChatSendRequest,\n    current_user: UserProfile = Depends(get_current_user),\n    db: AsyncSession = Depends(get_async_session)\n):\n    \"\"\"\n    Send a chat message to an LLM and receive a response.\n    \n    This endpoint:\n    1. Selects the appropriate LLM (specific model or default)\n    2. Checks department quota limits\n    3. Sends the message to the LLM\n    4. Logs usage statistics\n    5. Updates quota usage\n    6. Returns the LLM response with metadata\n    \"\"\"\n    try:\n        response = await chat_service.send_message(\n            request=request,\n            user=current_user,\n            db=db\n        )\n        return response\n        \n    except NoAvailableModelsError as e:\n        raise HTTPException(\n            status_code=status.HTTP_503_SERVICE_UNAVAILABLE,\n            detail={\n                \"error\": \"no_models_available\",\n                \"message\": str(e),\n                \"suggestions\": [\n                    \"Contact your administrator to configure LLM models\",\n                    \"Check if any models are enabled in the admin settings\"\n                ]\n            }\n        )\n    except QuotaExceededError as e:\n        raise HTTPException(\n            status_code=status.HTTP_429_TOO_MANY_REQUESTS,\n            detail={\n                \"error\": \"quota_exceeded\",\n                \"message\": str(e),\n                \"suggestions\": [\n                    \"Wait until next month for quota reset\",\n                    \"Contact your administrator to increase quota limits\",\n                    \"Try using a different model if available\"\n                ]\n            }\n        )\n    except LLMProviderError as e:\n        raise HTTPException(\n            status_code=status.HTTP_502_BAD_GATEWAY,\n            detail={\n                \"error\": \"llm_provider_error\",\n                \"message\": f\"LLM service error: {str(e)}\",\n                \"details\": getattr(e, 'details', {}),\n                \"suggestions\": [\n                    \"Try again in a few moments\",\n                    \"Contact support if the issue persists\"\n                ]\n            }\n        )\n    except ChatServiceError as e:\n        raise HTTPException(\n            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,\n            detail={\n                \"error\": \"chat_service_error\",\n                \"message\": str(e),\n                \"suggestions\": [\n                    \"Please try again\",\n                    \"Contact support if the issue persists\"\n                ]\n            }\n        )\n    except Exception as e:\n        raise HTTPException(\n            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,\n            detail={\n                \"error\": \"internal_server_error\",\n                \"message\": \"An unexpected error occurred\",\n                \"suggestions\": [\n                    \"Please try again\",\n                    \"Contact support if the issue persists\"\n                ]\n            }\n        )\n\n\n@router.get(\"/models\", response_model=AvailableModelsResponse)\nasync def get_available_models(\n    current_user: UserProfile = Depends(get_current_user),\n    db: AsyncSession = Depends(get_async_session)\n):\n    \"\"\"\n    Get list of available LLM models for the current user.\n    \n    Returns all enabled LLM configurations with their details.\n    \"\"\"\n    try:\n        models = await chat_service.get_available_models(db)\n        return models\n        \n    except ChatServiceError as e:\n        raise HTTPException(\n            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,\n            detail={\n                \"error\": \"service_error\",\n                \"message\": str(e)\n            }\n        )\n\n\n@router.get(\"/quota\", response_model=UsageQuotaInfo)\nasync def get_usage_quota(\n    current_user: UserProfile = Depends(get_current_user),\n    db: AsyncSession = Depends(get_async_session)\n):\n    \"\"\"\n    Get current usage quota information for the user's department.\n    \n    Returns quota limits, current usage, and remaining allowance.\n    \"\"\"\n    try:\n        quota_info = await chat_service.get_usage_quota_info(\n            user=current_user,\n            db=db\n        )\n        return quota_info\n        \n    except ChatServiceError as e:\n        raise HTTPException(\n            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,\n            detail={\n                \"error\": \"service_error\",\n                \"message\": str(e)\n            }\n        )\n\n\n@router.get(\"/stats\", response_model=ChatStatsResponse)\nasync def get_chat_stats(\n    current_user: UserProfile = Depends(get_current_user),\n    db: AsyncSession = Depends(get_async_session)\n):\n    \"\"\"\n    Get chat usage statistics for the current user.\n    \n    Returns metrics like total messages, tokens used, costs, etc.\n    \"\"\"\n    try:\n        stats = await chat_service.get_chat_stats(\n            user=current_user,\n            db=db\n        )\n        return stats\n        \n    except ChatServiceError as e:\n        raise HTTPException(\n            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,\n            detail={\n                \"error\": \"service_error\",\n                \"message\": str(e)\n            }\n        )\n\n\n@router.get(\"/health\", response_model=ChatHealthResponse)\nasync def get_chat_health(\n    db: AsyncSession = Depends(get_async_session)\n):\n    \"\"\"\n    Get chat service health status.\n    \n    Public endpoint that shows service availability and model status.\n    No authentication required for health checks.\n    \"\"\"\n    try:\n        health = await chat_service.get_health_status(db)\n        return health\n        \n    except ChatServiceError as e:\n        raise HTTPException(\n            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,\n            detail={\n                \"error\": \"service_error\",\n                \"message\": str(e)\n            }\n        )\n\n\n@router.post(\"/test\", response_model=Dict[str, Any])\nasync def test_chat_endpoint(\n    current_user: UserProfile = Depends(get_current_user),\n    db: AsyncSession = Depends(get_async_session)\n):\n    \"\"\"\n    Test endpoint for chat functionality validation.\n    \n    Returns service status and user information for testing.\n    \"\"\"\n    try:\n        # Get available models\n        models = await chat_service.get_available_models(db)\n        \n        # Get quota info\n        quota = await chat_service.get_usage_quota_info(current_user, db)\n        \n        # Get health status\n        health = await chat_service.get_health_status(db)\n        \n        return {\n            \"status\": \"chat_service_ready\",\n            \"user\": {\n                \"id\": str(current_user.id),\n                \"username\": current_user.username,\n                \"department\": current_user.department_name\n            },\n            \"models_available\": models.total_count,\n            \"default_model\": models.default_model.get(\"model_name\") if models.default_model else None,\n            \"quota_status\": {\n                \"limit\": quota.monthly_limit,\n                \"used\": quota.current_usage,\n                \"remaining\": quota.remaining_tokens,\n                \"exceeded\": quota.quota_exceeded\n            },\n            \"service_health\": health.status,\n            \"ready_for_chat\": health.status == \"healthy\" and not quota.quota_exceeded\n        }\n        \n    except Exception as e:\n        return {\n            \"status\": \"error\",\n            \"message\": str(e),\n            \"ready_for_chat\": False\n        }\n