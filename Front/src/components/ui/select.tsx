import * as React from \"react\"\nimport { ChevronDown } from \"lucide-react\"\nimport { cn } from \"../../lib/utils\"\n\ninterface SelectProps {\n  value?: string;\n  onValueChange?: (value: string) => void;\n  disabled?: boolean;\n  children: React.ReactNode;\n}\n\ninterface SelectTriggerProps extends React.HTMLAttributes<HTMLButtonElement> {\n  disabled?: boolean;\n  children: React.ReactNode;\n}\n\ninterface SelectContentProps {\n  children: React.ReactNode;\n}\n\ninterface SelectItemProps extends React.HTMLAttributes<HTMLDivElement> {\n  value: string;\n  children: React.ReactNode;\n}\n\ninterface SelectValueProps {\n  placeholder?: string;\n}\n\nconst SelectContext = React.createContext<{\n  value?: string;\n  onValueChange?: (value: string) => void;\n  isOpen: boolean;\n  setIsOpen: (open: boolean) => void;\n}>({\n  isOpen: false,\n  setIsOpen: () => {},\n});\n\nexport function Select({ value, onValueChange, children, disabled }: SelectProps) {\n  const [isOpen, setIsOpen] = React.useState(false);\n  \n  return (\n    <SelectContext.Provider value={{ value, onValueChange, isOpen, setIsOpen }}>\n      <div className=\"relative\">\n        {React.Children.map(children, (child) => {\n          if (React.isValidElement(child) && child.type === SelectTrigger) {\n            return React.cloneElement(child, { disabled });\n          }\n          return child;\n        })}\n      </div>\n    </SelectContext.Provider>\n  );\n}\n\nexport function SelectTrigger({ className, children, disabled, ...props }: SelectTriggerProps) {\n  const { isOpen, setIsOpen } = React.useContext(SelectContext);\n  \n  return (\n    <button\n      type=\"button\"\n      className={cn(\n        \"flex h-10 w-full items-center justify-between rounded-md border border-gray-300 bg-white px-3 py-2 text-sm focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      onClick={() => !disabled && setIsOpen(!isOpen)}\n      disabled={disabled}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </button>\n  );\n}\n\nexport function SelectContent({ children }: SelectContentProps) {\n  const { isOpen, setIsOpen } = React.useContext(SelectContext);\n  \n  if (!isOpen) return null;\n  \n  return (\n    <>\n      <div \n        className=\"fixed inset-0 z-40\" \n        onClick={() => setIsOpen(false)}\n      />\n      <div className=\"absolute z-50 mt-1 max-h-60 w-full overflow-auto rounded-md border border-gray-300 bg-white py-1 shadow-lg\">\n        {children}\n      </div>\n    </>\n  );\n}\n\nexport function SelectItem({ value, children, className, ...props }: SelectItemProps) {\n  const { onValueChange, setIsOpen } = React.useContext(SelectContext);\n  \n  return (\n    <div\n      className={cn(\n        \"relative cursor-pointer select-none py-2 px-3 text-sm hover:bg-gray-100 focus:bg-gray-100\",\n        className\n      )}\n      onClick={() => {\n        onValueChange?.(value);\n        setIsOpen(false);\n      }}\n      {...props}\n    >\n      {children}\n    </div>\n  );\n}\n\nexport function SelectValue({ placeholder }: SelectValueProps) {\n  const { value } = React.useContext(SelectContext);\n  \n  if (!value) {\n    return <span className=\"text-gray-400\">{placeholder}</span>;\n  }\n  \n  return <span>{value}</span>;\n}\n